{"mappings":"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","sources":["node_modules/alchemy-sdk/src/internal/request-batcher.ts","node_modules/alchemy-sdk/src/api/alchemy-provider.ts"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n"],"names":["$17de593d0ee0329d$var$RequestBatcher","constructor","sendBatchFn","maxBatchSize","this","pendingBatch","enqueueRequest","request","inflightRequest","resolve","undefined","reject","promise","Promise","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","$17de593d0ee0329d$export$999cc40da3fbc6f","$bsYBY","JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","super","$irJEB","E","batchRequests","batcherConnection","Object","assign","headers","batcher","requests","$6BV0e","fetchJson","JSON","stringify","static","D","C","getNetworkFromEthers","a","values","N","includes","join","type","g","b","I","V","allowGzip","detectNetwork","_super","call","_startPending","l","isCommunityResource","send","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","emit","action","d","provider","cache","indexOf","_cache","$17de593d0ee0329d$var$getResult","response"],"version":3,"file":"alchemy-provider-5ed73b95.7e326972.js.map"}